# -*- coding: utf-8 -*-
"""Lab3-DecisionTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wTCpoHXM0A5w9ue0sqY1C1SmECW-8BAy
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.tree import export_graphviz
import matplotlib.pyplot as plt
import graphviz
import seaborn as sns

# Load your dataset (replace 'dataset.csv' with your own dataset file)
data = pd.read_csv('/content/crop_recommendation.csv')

# Separate the features from the target variable (replace 'target_column' with the column name of your target variable)
X = data.drop('label', axis=1)
y = data['label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the decision tree classifier
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

# 1. Display Confusion Matrix
y_pred = clf.predict(X_test)
confusion_mat = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(confusion_mat)

# 1. Display Confusion Matrix using matplotlib
y_pred = clf.predict(X_test)
confusion_mat = confusion_matrix(y_test, y_pred)
class_labels = y.unique()

fig, ax = plt.subplots()
sns.heatmap(confusion_mat, annot=True, cmap='Blues', fmt='d', xticklabels=class_labels, yticklabels=class_labels, ax=ax)
ax.set_xlabel('Predicted')
ax.set_ylabel('True')
ax.set_title('Confusion Matrix')
plt.show()

# 2. Generate classification report
classification_rep = classification_report(y_test, y_pred)
print("Classification Report:")
print(classification_rep)

# 2. Generate classification report
classification_rep = classification_report(y_test, y_pred)
print("Classification Report:")
print(classification_rep)

# 3. Draw the decision tree
dot_data = export_graphviz(clf, out_file=None, feature_names=X.columns, class_names=y.unique(), filled=True)
graph = graphviz.Source(dot_data)
graph.render("decision_tree", format="png", cleanup=True, view=True)